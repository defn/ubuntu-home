#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"
  source normalize

  set -x

  local nm_branch=
  if [[ "$#" == 0 ]]; then
    nm_branch="$(cat Blockfile.json | jq -r '.branch//""')"
  else
    nm_branch="$1"; shift
  fi

  if [[ -z "$nm_branch" ]]; then
    nm_branch="$(git rev-parse --abbrev-ref HEAD)"
  fi

  local nm_branch="$(git rev-parse --abbrev-ref HEAD)"
  local nm_remote="$(git rev-parse --abbrev-ref "${nm_branch}@{upstream}")"
  nm_remote="${nm_remote%%/*}"

  git fetch
  git reset --hard "$nm_remote/$nm_branch"
  git checkout "$nm_branch"

  local nm_block_branch="$(cat Blockfile.json | jq -r '.blocks//""')"
  if [[ -z "$nm_block_branch" ]]; then
    nm_block_branch="$nm_branch"
  fi

  local url_remote="$(git remote get-url "${nm_remote}")"
  case "$url_remote" in
    http*)
      export GIT_CC_PREFIX="${url_remote%/*}/"
      ;;
    git@*)
      export GIT_CC_PREFIX="${url_remote%:*}:"
      ;;
  esac

  block clone
  if [[ -d work/block ]]; then
    pushd work/block
    git checkout "$nm_block_branch" || true
    git cc "${nm_remote}" imma/block
    git pull
    popd
  fi

  local pth_caller="${PWD}"
  block list | awk '{print $1,$2,$3}' | while read -r nm_block pth_block git_block; do
    if [[ $pth_block/ != $pth_caller/* ]]; then
      continue
    fi

    pushd "$pth_block"
    if [[ -w ".git" ]]; then
      local git_url="$(git remote get-url ${nm_remote})"
      if [[ "$git_url" != "$git_block" ]]; then
        git remote add "$nm_remote" "$git_block" 2>/dev/null || git remote set-url "$nm_remote" "$git_block"
      fi

      git branch --set-upstream-to "${nm_remote}/$nm_block_branch" 2>/dev/null \
        || { git fetch "${nm_remote}" \
              && git checkout -f -b "$nm_block_branch" "${nm_remote}/$nm_block_branch" \
              && git branch --set-upstream-to "${nm_remote}/$nm_block_branch"; } || true
      git remote -v || true
      git branch -a || true
      git branch -vv || true
    fi
    popd
  done

  if [[ -f "Blockfile.lock" ]]; then
	  git submodule update --init
  	cat Blockfile.lock  | envsubst | runmany 1 5 'set -x; cd $2 && git checkout --force $5 && git reset --hard $4 || (cd $2 && git fetch && git checkout --force $5 && git reset --hard)'
  fi
}

source sub "$BASH_SOURCE" "$@"
